import classnames from "classnames";
import React from "react";
import { StatusIconProps, StatusIconSizeType, StatusIconType } from "./StatusIcon.types";

const getClassType = (type?: StatusIconType) => {
  switch (type) {
    case "wait-for-action":
      return "bg-status-wait-for-action";
    case "work-in-progress":
      return "bg-status-work-in-progress";
    case "remind":
      return "bg-status-remind";
    case "complete":
      return "bg-status-complete";
    case "urgent":
      return "bg-status-urgent";
    case "wait-for-uncontrol":
      return "bg-status-wait-for-uncontrol";
    case "end":
      return "bg-status-end";
    case "need-urgent-action":
      return "bg-status-need-urgent-action";
    default:
      return "bg-status-disable";
  }
};

const getChildren = (type?: StatusIconType, children?: React.ReactNode) => {
  if (children) {
    return children;
  }
  switch (type) {
    case "remind": {
      return (
        <svg width="80%" height="60%" viewBox="0 0 4 12" fill="none" xmlns="http://www.w3.org/2000/svg">
          <path
            d="M2 0.0838318C1.57895 0.0838318 1.17929 0.252422 0.905435 0.568211C0.631583 0.90539 0.484378 1.32644 0.526319 1.72528L1.3051 7.83054C1.53701 7.76804 1.76809 7.74666 2 7.74666C2.25247 7.74666 2.48354 7.7886 2.71546 7.85192L3.47369 1.74666V1.55752C3.47369 0.7368 2.80017 0.0838318 2 0.0838318Z"
            fill="white"
          />
          <path
            d="M0.526319 10.4209C0.526319 11.2425 1.17929 11.916 2 11.916C2.82074 11.916 3.4737 11.2416 3.49508 10.4209C3.49508 9.60021 2.82072 8.94724 2 8.94724C1.17929 8.94724 0.526319 9.60021 0.526319 10.4209Z"
            fill="white"
          />
        </svg>
      );
    }
    case "complete": {
      return (
        <svg width="60%" height="80%" viewBox="0 0 12 9" fill="none" xmlns="http://www.w3.org/2000/svg">
          <path
            d="M11.0261 1.14891C10.9788 1.10162 10.9227 1.06411 10.8609 1.03851C10.7992 1.01292 10.733 0.999741 10.6661 0.999741C10.5992 0.999741 10.533 1.01292 10.4712 1.03851C10.4095 1.06411 10.3534 1.10162 10.3061 1.14891L4.20609 7.24891L1.86809 4.90191C1.77261 4.80643 1.64312 4.75279 1.50809 4.75279C1.37306 4.75279 1.24357 4.80643 1.14809 4.90191C1.05261 4.99739 0.998974 5.12688 0.998974 5.26191C0.998974 5.39694 1.05261 5.52643 1.14809 5.62191L3.84809 8.32191C3.89536 8.3692 3.95148 8.40671 4.01325 8.43231C4.07502 8.4579 4.14123 8.47107 4.20809 8.47107C4.27495 8.47107 4.34116 8.4579 4.40293 8.43231C4.4647 8.40671 4.52082 8.3692 4.56809 8.32191L11.0231 1.86591C11.1181 1.77096 11.1717 1.64233 11.1723 1.50803C11.1728 1.37372 11.1203 1.24464 11.0261 1.14891Z"
            fill="white"
            stroke="white"
          />
        </svg>
      );
    }
    case "cancel": {
      return (
        <svg width="50%" height="80%" viewBox="0 0 10 10" fill="none" xmlns="http://www.w3.org/2000/svg">
          <path
            d="M5.8906 4.99302L9.81752 1.06592C9.93454 0.948646 10.0002 0.789686 10 0.62401C9.99982 0.458335 9.93384 0.299516 9.81657 0.182491C9.6993 0.0654664 9.54035 -0.000177402 9.37468 3.60091e-07C9.20901 0.000178122 9.0502 0.0661629 8.93318 0.183439L5.00626 4.11054L1.08029 0.183439C0.963147 0.0662886 0.804264 0.000474295 0.638596 0.000474295C0.472928 0.000474295 0.314046 0.0662886 0.196901 0.183439C0.0797562 0.300589 0.0139449 0.459479 0.0139449 0.625154C0.0139449 0.79083 0.0797562 0.94972 0.196901 1.06687L4.12382 4.99302L0.196901 8.92012C0.135911 8.97743 0.0870587 9.04641 0.0532467 9.12297C0.0194348 9.19953 0.00135221 9.28211 7.29784e-05 9.36579C-0.00120626 9.44948 0.0143439 9.53257 0.0458 9.61013C0.0772561 9.68768 0.123977 9.75813 0.183187 9.81728C0.242397 9.87643 0.312889 9.92308 0.390478 9.95445C0.468066 9.98582 0.551168 10.0013 0.634847 9.99992C0.718527 9.99855 0.801078 9.98038 0.877599 9.94648C0.954119 9.91258 1.02305 9.86366 1.08029 9.8026L5.00626 5.87645L8.93318 9.8026C9.05032 9.91975 9.20921 9.98557 9.37488 9.98557C9.54054 9.98557 9.69943 9.91975 9.81657 9.8026C9.93371 9.68545 9.99953 9.52656 9.99953 9.36089C9.99953 9.19521 9.93371 9.03632 9.81657 8.91917L5.8906 4.99302Z"
            fill="white"
          />
        </svg>
      );
    }
    case "pending": {
      return (
        <svg width="50%" height="50%" viewBox="0 0 6 10" fill="none" xmlns="http://www.w3.org/2000/svg">
          <path
            d="M1.53938 0.140717C1.15256 0.140717 0.837605 0.454704 0.837605 0.842491L0.837644 6.50774C0.837644 6.72623 0.958701 6.94376 1.128 7.06482L4.3485 9.48607C4.46956 9.58348 4.61427 9.63172 4.75992 9.63172C4.97842 9.63172 5.17135 9.53525 5.317 9.34136C5.53454 9.02641 5.48631 8.59039 5.17135 8.34826L2.24115 6.14454V0.842491C2.24115 0.455672 1.92717 0.140717 1.53938 0.140717Z"
            fill="white"
          />
        </svg>
      );
    }
    case "urgent": {
      return (
        <svg width="50%" height="80%" viewBox="0 0 10 13" fill="none" xmlns="http://www.w3.org/2000/svg">
          <path
            d="M7.71522 5.29943C7.3674 5.01232 7.036 4.70498 6.76147 4.34732C5.20019 2.31354 6.00897 0.606659 6.00897 0.606659C3.10999 1.82291 2.44989 3.75386 2.41825 5.19222L2.41989 5.20753C2.41989 5.20753 2.44505 6.03167 2.81528 6.93779C2.93122 7.22107 2.80216 7.55302 2.50794 7.63834C2.26458 7.70888 2.01466 7.58912 1.91185 7.36599C1.7456 7.00506 1.52576 6.43029 1.58919 6.02506C1.12982 6.63374 0.826301 7.37365 0.748097 8.1945C0.543025 10.353 2.03053 12.3563 4.15682 12.7801C6.59646 13.2662 8.9031 11.5928 9.23126 9.16638C9.43633 7.64766 8.81618 6.20832 7.71534 5.29944L7.71522 5.29943ZM6.25782 9.93315C6.24251 9.95338 5.84766 10.4461 5.18595 10.497C5.14986 10.4986 5.11267 10.5003 5.07658 10.5003C4.61994 10.5003 4.15728 10.2831 3.69736 9.85221L3.59673 9.75814L3.7247 9.70838C3.73345 9.7051 4.61172 9.36658 4.8272 8.63322C4.90048 8.38549 4.87696 8.10329 4.76048 7.84025C4.62048 7.51868 4.35032 6.7104 4.86329 6.12413L4.96228 6.01147L5.0104 6.15311C5.01204 6.16186 5.32158 7.0642 6.05329 7.53615C6.27368 7.67998 6.43938 7.85388 6.54384 8.0524C6.75876 8.47022 6.88563 9.13522 6.25782 9.93316L6.25782 9.93315Z"
            fill="white"
          />
        </svg>
      );
    }
    case "wait-for-uncontrol": {
      return (
        <svg width="50%" height="50%" viewBox="0 0 6 10" fill="none" xmlns="http://www.w3.org/2000/svg">
          <path
            d="M1.53938 0.140717C1.15256 0.140717 0.837605 0.454704 0.837605 0.842491L0.837644 6.50774C0.837644 6.72623 0.958701 6.94376 1.128 7.06482L4.3485 9.48607C4.46956 9.58348 4.61427 9.63172 4.75992 9.63172C4.97842 9.63172 5.17135 9.53525 5.317 9.34136C5.53454 9.02641 5.48631 8.59039 5.17135 8.34826L2.24115 6.14454V0.842491C2.24115 0.455672 1.92717 0.140717 1.53938 0.140717Z"
            fill="#212121"
          />
        </svg>
      );
    }
    case "need-urgent-action": {
      return (
        <svg width="50%" height="80%" viewBox="0 0 10 10" fill="none" xmlns="http://www.w3.org/2000/svg">
          <path
            d="M5.8906 4.99302L9.81752 1.06592C9.93454 0.948646 10.0002 0.789686 10 0.62401C9.99982 0.458335 9.93384 0.299516 9.81657 0.182491C9.6993 0.0654664 9.54035 -0.000177402 9.37468 3.60091e-07C9.20901 0.000178122 9.0502 0.0661629 8.93318 0.183439L5.00626 4.11054L1.08029 0.183439C0.963147 0.0662886 0.804264 0.000474295 0.638596 0.000474295C0.472928 0.000474295 0.314046 0.0662886 0.196901 0.183439C0.0797562 0.300589 0.0139449 0.459479 0.0139449 0.625154C0.0139449 0.79083 0.0797562 0.94972 0.196901 1.06687L4.12382 4.99302L0.196901 8.92012C0.135911 8.97743 0.0870587 9.04641 0.0532467 9.12297C0.0194348 9.19953 0.00135221 9.28211 7.29784e-05 9.36579C-0.00120626 9.44948 0.0143439 9.53257 0.0458 9.61013C0.0772561 9.68769 0.123977 9.75813 0.183187 9.81728C0.242397 9.87643 0.312889 9.92308 0.390478 9.95445C0.468066 9.98582 0.551167 10.0013 0.634847 9.99992C0.718527 9.99855 0.801078 9.98038 0.877599 9.94648C0.954119 9.91258 1.02305 9.86366 1.08029 9.8026L5.00626 5.87645L8.93318 9.8026C9.05032 9.91975 9.20921 9.98557 9.37488 9.98557C9.54054 9.98557 9.69942 9.91975 9.81657 9.8026C9.93371 9.68545 9.99953 9.52656 9.99953 9.36089C9.99953 9.19521 9.93371 9.03632 9.81657 8.91917L5.8906 4.99302Z"
            fill="white"
          />
        </svg>
      );
    }
  }
  return;
};

const getSizeClassName = (size?: StatusIconSizeType): string => {
  switch (size) {
    case "xs":
      return "w-status-icon-xs h-status-icon-xs";
    case "sm":
      return "w-status-icon-sm h-status-icon-sm";
    case "lg":
      return "w-status-icon-lg h-status-icon-lg";
    case "xl":
      return "w-status-icon-xl h-status-icon-xl";
    default:
      return "w-status-icon-base h-status-icon-base";
  }
};

const StatusIcon = ({ children, size, type, className, ...props }: StatusIconProps): React.ReactElement => {
  return (
    <span
      data-testid={props["data-testid"] || "sushi-status-icon"}
      className={classnames(
        "flex flex-col items-center justify-center text-white rounded-full leading-141",
        getSizeClassName(size),
        getClassType(type),
        className
      )}
    >
      {getChildren(type, children)}
    </span>
  );
};

export default StatusIcon;
